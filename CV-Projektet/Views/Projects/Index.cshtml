@model List<Project>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

<div class="cardContainer" ">
	@foreach (var item in Model)
	{
	<div class="card projectCard">
		<h3>@item.Name</h3>
		<p>@item.Description</p>
		<br>
		@if(item.ProjectLeader.IsPublic || SignInManager.IsSignedIn(User))
		{
		<h4>Projektledare</h4>
		<div class="participants">
			<a href="@Url.Action("Index", "CV", new { userID = item.ProjectLeaderID})">
				@item.ProjectLeader.FirstName @item.ProjectLeader.LastName
			</a>
		</div>
		<br>

		}

		@try{
		@if(SignInManager.IsSignedIn(User) && item.User_Project.Any())
		{
		<h4>Medverkande</h4>
		<div>
			@foreach (var x in item.User_Project){
			<div class="participants">
				<a href="@Url.Action("Index", "CV", new { userID = x.UserID})">
					@x.User.FirstName @x.User.LastName
				</a>
			</div>
			}
		</div>
		}
		else if(!SignInManager.IsSignedIn(User) && item.User_Project.Where(x=>x.User.IsPublic==true).Any())
		{
		<h4>Medverkande</h4>
		<div>
			@foreach(var x in item.User_Project.Where(x=>x.User.IsPublic==true))
			{
			<div class="participants">
				<a href="@Url.Action("Index", "CV", new { userID = x.UserID})">
					@x.User.FirstName @x.User.LastName
				</a>
			</div>
			}
		</div>
		}
		}catch(Exception ex){}


		@if (SignInManager.IsSignedIn(User))
		{
		bool involved = false;
		foreach (var person in item.User_Project)
		{
		if (person.UserID.Equals(UserManager.GetUserId(User)))
		{
		involved = true;
		}
		}
		<br />
		if (involved)
		{
		<a class="involved" href="@Url.Action("LeaveProject", "User", new { projectId = item.ID, caller = "projects"})">&#x2717; Lämna projektet</a>
		}
		else
		{
		<a class="involved" href="@Url.Action("JoinProject", "User", new { projectId = item.ID, caller = "projects"})">&#x2713; Gå med i projektet</a>
		}
		}
	</div>
	}
	<div class="orangeSquare"></div>
</div>
