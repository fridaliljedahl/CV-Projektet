// <auto-generated />
using System;
using CV_Projektet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CV_Projektet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221228135940_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CV_Projektet.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            City = "Örebro",
                            PostalCode = 12345,
                            Street = "Storgatan 1"
                        },
                        new
                        {
                            ID = 2,
                            City = "Ystad",
                            PostalCode = 12365,
                            Street = "Drottninggatan 12"
                        },
                        new
                        {
                            ID = 3,
                            City = "Göteborg",
                            PostalCode = 16845,
                            Street = "Kungsgatan 43"
                        },
                        new
                        {
                            ID = 4,
                            City = "Gnesta",
                            PostalCode = 16845,
                            Street = "Storälven 22"
                        });
                });

            modelBuilder.Entity("CV_Projektet.Models.Competence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Competences");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "C#"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Java"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Kassavana"
                        },
                        new
                        {
                            ID = 4,
                            Name = "HLR"
                        });
                });

            modelBuilder.Entity("CV_Projektet.Models.CV", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("TimesViewed")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("CVs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            TimesViewed = 0,
                            UserID = "användare1id"
                        },
                        new
                        {
                            ID = 2,
                            TimesViewed = 3,
                            UserID = "användare3id"
                        },
                        new
                        {
                            ID = 3,
                            TimesViewed = 12,
                            UserID = "användare2id"
                        },
                        new
                        {
                            ID = 4,
                            TimesViewed = 55,
                            UserID = "användare4id"
                        });
                });

            modelBuilder.Entity("CV_Projektet.Models.CV_Competences", b =>
                {
                    b.Property<int>("CVID")
                        .HasColumnType("int");

                    b.Property<int>("CompetenceID")
                        .HasColumnType("int");

                    b.HasKey("CVID", "CompetenceID");

                    b.HasIndex("CompetenceID");

                    b.ToTable("CV_Competences");

                    b.HasData(
                        new
                        {
                            CVID = 1,
                            CompetenceID = 1
                        },
                        new
                        {
                            CVID = 1,
                            CompetenceID = 2
                        },
                        new
                        {
                            CVID = 2,
                            CompetenceID = 3
                        },
                        new
                        {
                            CVID = 2,
                            CompetenceID = 2
                        },
                        new
                        {
                            CVID = 2,
                            CompetenceID = 4
                        },
                        new
                        {
                            CVID = 3,
                            CompetenceID = 4
                        },
                        new
                        {
                            CVID = 4,
                            CompetenceID = 1
                        },
                        new
                        {
                            CVID = 4,
                            CompetenceID = 2
                        },
                        new
                        {
                            CVID = 4,
                            CompetenceID = 3
                        });
                });

            modelBuilder.Entity("CV_Projektet.Models.Experience", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CVID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CVID");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CVID = 1,
                            City = "Lund",
                            Description = "pratade i telefon",
                            EndDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Place = "ICA",
                            StartDate = new DateTime(2022, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kundtjänst",
                            Type = "Work"
                        },
                        new
                        {
                            ID = 2,
                            CVID = 1,
                            City = "Örebro",
                            Description = "Java",
                            EndDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Place = "Örebro Universitet",
                            StartDate = new DateTime(2021, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Systemvetenskap",
                            Type = "Education"
                        },
                        new
                        {
                            ID = 3,
                            CVID = 1,
                            City = "Göteborg",
                            Description = "HLR-utbildning",
                            EndDate = new DateTime(2022, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Place = "Företag1",
                            StartDate = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "HLR",
                            Type = "Course"
                        },
                        new
                        {
                            ID = 4,
                            CVID = 2,
                            City = "Örebro",
                            Description = "Beskrivning blabla",
                            EndDate = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Place = "Örebro Universitet",
                            StartDate = new DateTime(2019, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Lärarprogrammet",
                            Type = "Education"
                        },
                        new
                        {
                            ID = 5,
                            CVID = 1,
                            City = "Örebro",
                            Description = "Java",
                            EndDate = new DateTime(2022, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Place = "Örebro Universitet",
                            StartDate = new DateTime(2022, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Systemvetenskap",
                            Type = "Education"
                        });
                });

            modelBuilder.Entity("CV_Projektet.Models.ImageModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ID = 4,
                            Name = "image (1)223847664.png",
                            Title = "Profilbild",
                            UserID = "användare1id"
                        });
                });

            modelBuilder.Entity("CV_Projektet.Models.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Receiver");

                    b.HasIndex("Sender");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Date = new DateTime(2022, 12, 28, 14, 59, 40, 61, DateTimeKind.Local).AddTicks(2444),
                            Read = false,
                            Receiver = "användare2id",
                            Sender = "användare1id",
                            Text = "hejsan hoppsan"
                        });
                });

            modelBuilder.Entity("CV_Projektet.Models.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectLeaderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ProjectLeaderID");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Projektbeskrivningen blabla",
                            Name = "Planeringsprojektet",
                            ProjectLeaderID = "användare1id"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Projektbeskrivningen blabla",
                            Name = "Yogahemsideprojektet",
                            ProjectLeaderID = "användare2id"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2022, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Projektbeskrivningen blabla",
                            Name = "CV-Projektet",
                            ProjectLeaderID = "användare3id"
                        },
                        new
                        {
                            ID = 4,
                            CreatedDate = new DateTime(2022, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Projektbeskrivningen blabla",
                            Name = "Mötesprojektet",
                            ProjectLeaderID = "användare4id"
                        });
                });

            modelBuilder.Entity("CV_Projektet.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdressID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdressID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "användare1id",
                            AccessFailedCount = 0,
                            AdressID = 1,
                            ConcurrencyStamp = "2c7a5470-462e-4185-9d33-bd7d4d6c90ea",
                            Description = "Hejaaa",
                            Email = "inga@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Inga",
                            IsActive = true,
                            IsPublic = true,
                            LastName = "Karlsson",
                            LockoutEnabled = false,
                            PasswordHash = "mittnamnäringa",
                            PhoneNumber = "073-111 11 11",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2022, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "c4dc09ab-e50f-4c4b-a38c-2483c951a64c",
                            TwoFactorEnabled = false,
                            UserName = "Ingis"
                        },
                        new
                        {
                            Id = "användare2id",
                            AccessFailedCount = 0,
                            AdressID = 1,
                            ConcurrencyStamp = "71fea3bf-745a-4e27-b7e0-795c98d2758f",
                            Description = "Halloj",
                            Email = "gunvor@hotmail.se",
                            EmailConfirmed = false,
                            FirstName = "Gunvor",
                            IsActive = true,
                            IsPublic = true,
                            LastName = "Nilsson",
                            LockoutEnabled = false,
                            PasswordHash = "mittnamnärgunvor",
                            PhoneNumber = "073-222 22 22",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2022, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "14a8aa26-d2e3-4ec4-b962-e27cb6d3506e",
                            TwoFactorEnabled = false,
                            UserName = "Gunnis"
                        },
                        new
                        {
                            Id = "användare3id",
                            AccessFailedCount = 0,
                            AdressID = 1,
                            ConcurrencyStamp = "66576d19-aac3-49bd-bbeb-512974b1e983",
                            Description = "dfggdffdgfdgdffdggdf",
                            Email = "Jögge@hotmail.se",
                            EmailConfirmed = false,
                            FirstName = "Jörgen",
                            IsActive = true,
                            IsPublic = true,
                            LastName = "Svensson",
                            LockoutEnabled = false,
                            PasswordHash = "mittnamnärjörgen",
                            PhoneNumber = "073-333 33 33",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2022, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ac8640ba-451c-4f53-aa54-bbaadb0e31bd",
                            TwoFactorEnabled = false,
                            UserName = "Jöggis"
                        },
                        new
                        {
                            Id = "användare4id",
                            AccessFailedCount = 0,
                            AdressID = 2,
                            ConcurrencyStamp = "65c8db7e-c11a-4f6d-b3f0-da2f9672ae7d",
                            Description = "dfggdffdgfdgdffdggdf",
                            Email = "stenis@hotmail.se",
                            EmailConfirmed = false,
                            FirstName = "Sten",
                            IsActive = true,
                            IsPublic = true,
                            LastName = "Kallesson",
                            LockoutEnabled = false,
                            PasswordHash = "mittnamnärsten",
                            PhoneNumber = "074-444 44 44",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2022, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "66aa6ac9-ad45-4f2b-88f8-96c0e352858d",
                            TwoFactorEnabled = false,
                            UserName = "Stenis"
                        },
                        new
                        {
                            Id = "användare5id",
                            AccessFailedCount = 0,
                            AdressID = 3,
                            ConcurrencyStamp = "526db4be-f070-41c9-9a46-7995523ec4b9",
                            Description = "dfggdffdgfdgdffdggdf",
                            Email = "kajsa@hotmail.se",
                            EmailConfirmed = false,
                            FirstName = "Kajsa",
                            IsActive = true,
                            IsPublic = true,
                            LastName = "Stenbäck",
                            LockoutEnabled = false,
                            PasswordHash = "mittnamnärkajsa",
                            PhoneNumber = "075-123 55 55",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2022, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "b1ac829c-2cb8-40ae-a078-cf094c485a8b",
                            TwoFactorEnabled = false,
                            UserName = "Kajsis"
                        },
                        new
                        {
                            Id = "användare6id",
                            AccessFailedCount = 0,
                            AdressID = 4,
                            ConcurrencyStamp = "a367a7d5-033a-4cbe-bd04-17dcfe377764",
                            Description = "dfggdffdgfdgdffdggdf",
                            Email = "frida@hotmail.se",
                            EmailConfirmed = false,
                            FirstName = "Frida",
                            IsActive = false,
                            IsPublic = false,
                            LastName = "Liljedahl",
                            LockoutEnabled = false,
                            PasswordHash = "mittnamnärfrida",
                            PhoneNumber = "075-555 55 55",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2022, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "433c7db1-99cf-4d51-a8a5-48069c823468",
                            TwoFactorEnabled = false,
                            UserName = "Fridis"
                        },
                        new
                        {
                            Id = "användare7id",
                            AccessFailedCount = 0,
                            AdressID = 2,
                            ConcurrencyStamp = "0e7a5342-361b-410c-a752-7823afead603",
                            Description = "dfggdffdgfdgdffdggdf",
                            Email = "linda@hotmail.se",
                            EmailConfirmed = false,
                            FirstName = "Linda",
                            IsActive = true,
                            IsPublic = false,
                            LastName = "Nordeman",
                            LockoutEnabled = false,
                            PasswordHash = "mittnamnärlinda",
                            PhoneNumber = "076-666 66 66",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "4a56f759-61c9-45fa-b7c3-6e0b27e022e1",
                            TwoFactorEnabled = false,
                            UserName = "Lindis"
                        },
                        new
                        {
                            Id = "användare8id",
                            AccessFailedCount = 0,
                            AdressID = 3,
                            ConcurrencyStamp = "7a74bec1-5df0-41af-a955-ece37690e41d",
                            Description = "dfggdffdgfdgdffdggdf",
                            Email = "lisa@hotmail.se",
                            EmailConfirmed = false,
                            FirstName = "Lisa",
                            IsActive = true,
                            IsPublic = false,
                            LastName = "Kjellgren",
                            LockoutEnabled = false,
                            PasswordHash = "mittnamnärlisa",
                            PhoneNumber = "077-773 33 33",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "7c2e5182-ca58-4a22-9a3c-eebb3b17fd90",
                            TwoFactorEnabled = false,
                            UserName = "Lisis"
                        },
                        new
                        {
                            Id = "användare9id",
                            AccessFailedCount = 0,
                            AdressID = 2,
                            ConcurrencyStamp = "b815dd32-2df8-4575-b9de-c101f144c614",
                            Description = "dfggdffdgfdgdffdggdf",
                            Email = "viktor@hotmail.se",
                            EmailConfirmed = false,
                            FirstName = "Viktor",
                            IsActive = false,
                            IsPublic = false,
                            LastName = "Hemlin Gravander",
                            LockoutEnabled = false,
                            PasswordHash = "mittnamnärviktor",
                            PhoneNumber = "073-333 33 33",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2021, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "e99cf35e-9c95-4f55-9a28-49ddc6705545",
                            TwoFactorEnabled = false,
                            UserName = "Vickis"
                        },
                        new
                        {
                            Id = "användare10id",
                            AccessFailedCount = 0,
                            AdressID = 4,
                            ConcurrencyStamp = "2d51cf53-809a-4561-8ac7-66ea83716e05",
                            Description = "dfggdffdgfdgdffdggdf",
                            Email = "ulla@hotmail.se",
                            EmailConfirmed = false,
                            FirstName = "Ulla",
                            IsActive = false,
                            IsPublic = true,
                            LastName = "Ivarsson",
                            LockoutEnabled = false,
                            PasswordHash = "mittnamnärulla",
                            PhoneNumber = "073-888 33 33",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2020, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "107adb6c-3b15-4f8b-9d1f-254d4d5c247f",
                            TwoFactorEnabled = false,
                            UserName = "Ullis"
                        });
                });

            modelBuilder.Entity("CV_Projektet.Models.User_Projects", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("User_Projects");

                    b.HasData(
                        new
                        {
                            UserID = "användare1id",
                            ProjectID = 1
                        },
                        new
                        {
                            UserID = "användare1id",
                            ProjectID = 2
                        },
                        new
                        {
                            UserID = "användare2id",
                            ProjectID = 1
                        },
                        new
                        {
                            UserID = "användare2id",
                            ProjectID = 3
                        },
                        new
                        {
                            UserID = "användare3id",
                            ProjectID = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CV_Projektet.Models.CV", b =>
                {
                    b.HasOne("CV_Projektet.Models.User", "User")
                        .WithOne("CV")
                        .HasForeignKey("CV_Projektet.Models.CV", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CV_Projektet.Models.CV_Competences", b =>
                {
                    b.HasOne("CV_Projektet.Models.CV", "CV")
                        .WithMany("CV_Competences")
                        .HasForeignKey("CVID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Projektet.Models.Competence", "Competence")
                        .WithMany("CV_Competences")
                        .HasForeignKey("CompetenceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Competence");
                });

            modelBuilder.Entity("CV_Projektet.Models.Experience", b =>
                {
                    b.HasOne("CV_Projektet.Models.CV", "CV")
                        .WithMany("Experiences")
                        .HasForeignKey("CVID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");
                });

            modelBuilder.Entity("CV_Projektet.Models.ImageModel", b =>
                {
                    b.HasOne("CV_Projektet.Models.User", "user")
                        .WithOne("ImageModel")
                        .HasForeignKey("CV_Projektet.Models.ImageModel", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("CV_Projektet.Models.Message", b =>
                {
                    b.HasOne("CV_Projektet.Models.User", "UserReceiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("Receiver")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CV_Projektet.Models.User", "UserSender")
                        .WithMany("SentMessages")
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserReceiver");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("CV_Projektet.Models.Project", b =>
                {
                    b.HasOne("CV_Projektet.Models.User", "ProjectLeader")
                        .WithMany("LeadProjects")
                        .HasForeignKey("ProjectLeaderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProjectLeader");
                });

            modelBuilder.Entity("CV_Projektet.Models.User", b =>
                {
                    b.HasOne("CV_Projektet.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AdressID");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CV_Projektet.Models.User_Projects", b =>
                {
                    b.HasOne("CV_Projektet.Models.Project", "Project")
                        .WithMany("User_Project")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Projektet.Models.User", "User")
                        .WithMany("UsersAndProjects")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CV_Projektet.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CV_Projektet.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Projektet.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CV_Projektet.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CV_Projektet.Models.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CV_Projektet.Models.Competence", b =>
                {
                    b.Navigation("CV_Competences");
                });

            modelBuilder.Entity("CV_Projektet.Models.CV", b =>
                {
                    b.Navigation("CV_Competences");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("CV_Projektet.Models.Project", b =>
                {
                    b.Navigation("User_Project");
                });

            modelBuilder.Entity("CV_Projektet.Models.User", b =>
                {
                    b.Navigation("CV");

                    b.Navigation("ImageModel");

                    b.Navigation("LeadProjects");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("UsersAndProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
